// Code generated by MockGen. DO NOT EDIT.
// Source: protocol/p2p.go

// Package mock is a generated GoMock package.
package mock

import (
	event "github.com/chain5j/chain5j-pkg/event"
	models "github.com/chain5j/chain5j-protocol/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockP2PService is a mock of P2PService interface
type MockP2PService struct {
	ctrl     *gomock.Controller
	recorder *MockP2PServiceMockRecorder
}

// MockP2PServiceMockRecorder is the mock recorder for MockP2PService
type MockP2PServiceMockRecorder struct {
	mock *MockP2PService
}

// NewMockP2PService creates a new mock instance
func NewMockP2PService(ctrl *gomock.Controller) *MockP2PService {
	mock := &MockP2PService{ctrl: ctrl}
	mock.recorder = &MockP2PServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockP2PService) EXPECT() *MockP2PServiceMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockP2PService) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockP2PServiceMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockP2PService)(nil).Start))
}

// Stop mocks base method
func (m *MockP2PService) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockP2PServiceMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockP2PService)(nil).Stop))
}

// Id mocks base method
func (m *MockP2PService) Id() models.P2PID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Id")
	ret0, _ := ret[0].(models.P2PID)
	return ret0
}

// Id indicates an expected call of Id
func (mr *MockP2PServiceMockRecorder) Id() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Id", reflect.TypeOf((*MockP2PService)(nil).Id))
}

// NetURL mocks base method
func (m *MockP2PService) NetURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// NetURL indicates an expected call of NetURL
func (mr *MockP2PServiceMockRecorder) NetURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetURL", reflect.TypeOf((*MockP2PService)(nil).NetURL))
}

// RemotePeers mocks base method
func (m *MockP2PService) RemotePeers() []models.P2PID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemotePeers")
	ret0, _ := ret[0].([]models.P2PID)
	return ret0
}

// RemotePeers indicates an expected call of RemotePeers
func (mr *MockP2PServiceMockRecorder) RemotePeers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemotePeers", reflect.TypeOf((*MockP2PService)(nil).RemotePeers))
}

// P2PInfo mocks base method
func (m *MockP2PService) P2PInfo() map[string]*models.P2PInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "P2PInfo")
	ret0, _ := ret[0].(map[string]*models.P2PInfo)
	return ret0
}

// P2PInfo indicates an expected call of P2PInfo
func (mr *MockP2PServiceMockRecorder) P2PInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "P2PInfo", reflect.TypeOf((*MockP2PService)(nil).P2PInfo))
}

// HandshakeSuccess mocks base method
func (m *MockP2PService) HandshakeSuccess(peerId models.P2PID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandshakeSuccess", peerId)
}

// HandshakeSuccess indicates an expected call of HandshakeSuccess
func (mr *MockP2PServiceMockRecorder) HandshakeSuccess(peerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandshakeSuccess", reflect.TypeOf((*MockP2PService)(nil).HandshakeSuccess), peerId)
}

// Send mocks base method
func (m *MockP2PService) Send(peerId models.P2PID, msg *models.P2PMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", peerId, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockP2PServiceMockRecorder) Send(peerId, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockP2PService)(nil).Send), peerId, msg)
}

// AddPeer mocks base method
func (m *MockP2PService) AddPeer(peerUrl string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPeer", peerUrl)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPeer indicates an expected call of AddPeer
func (mr *MockP2PServiceMockRecorder) AddPeer(peerUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPeer", reflect.TypeOf((*MockP2PService)(nil).AddPeer), peerUrl)
}

// DropPeer mocks base method
func (m *MockP2PService) DropPeer(peerId models.P2PID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropPeer", peerId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropPeer indicates an expected call of DropPeer
func (mr *MockP2PServiceMockRecorder) DropPeer(peerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropPeer", reflect.TypeOf((*MockP2PService)(nil).DropPeer), peerId)
}

// SubscribeMsg mocks base method
func (m *MockP2PService) SubscribeMsg(msgType uint, ch chan<- *models.P2PMessage) event.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeMsg", msgType, ch)
	ret0, _ := ret[0].(event.Subscription)
	return ret0
}

// SubscribeMsg indicates an expected call of SubscribeMsg
func (mr *MockP2PServiceMockRecorder) SubscribeMsg(msgType, ch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeMsg", reflect.TypeOf((*MockP2PService)(nil).SubscribeMsg), msgType, ch)
}

// SubscribeHandshakePeer mocks base method
func (m *MockP2PService) SubscribeHandshakePeer(ch chan<- models.P2PID) event.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeHandshakePeer", ch)
	ret0, _ := ret[0].(event.Subscription)
	return ret0
}

// SubscribeHandshakePeer indicates an expected call of SubscribeHandshakePeer
func (mr *MockP2PServiceMockRecorder) SubscribeHandshakePeer(ch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeHandshakePeer", reflect.TypeOf((*MockP2PService)(nil).SubscribeHandshakePeer), ch)
}

// SubscribeNewPeer mocks base method
func (m *MockP2PService) SubscribeNewPeer(ch chan<- models.P2PID) event.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeNewPeer", ch)
	ret0, _ := ret[0].(event.Subscription)
	return ret0
}

// SubscribeNewPeer indicates an expected call of SubscribeNewPeer
func (mr *MockP2PServiceMockRecorder) SubscribeNewPeer(ch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeNewPeer", reflect.TypeOf((*MockP2PService)(nil).SubscribeNewPeer), ch)
}

// SubscribeDropPeer mocks base method
func (m *MockP2PService) SubscribeDropPeer(ch chan<- models.P2PID) event.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeDropPeer", ch)
	ret0, _ := ret[0].(event.Subscription)
	return ret0
}

// SubscribeDropPeer indicates an expected call of SubscribeDropPeer
func (mr *MockP2PServiceMockRecorder) SubscribeDropPeer(ch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeDropPeer", reflect.TypeOf((*MockP2PService)(nil).SubscribeDropPeer), ch)
}
