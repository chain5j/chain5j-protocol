// Code generated by MockGen. DO NOT EDIT.
// Source: protocol/blockchain.go

// Package mock is a generated GoMock package.
package mock

import (
	event "github.com/chain5j/chain5j-pkg/event"
	types "github.com/chain5j/chain5j-pkg/types"
	models "github.com/chain5j/chain5j-protocol/models"
	eventtype "github.com/chain5j/chain5j-protocol/models/eventtype"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBlockReadWriter is a mock of BlockReadWriter interface
type MockBlockReadWriter struct {
	ctrl     *gomock.Controller
	recorder *MockBlockReadWriterMockRecorder
}

// MockBlockReadWriterMockRecorder is the mock recorder for MockBlockReadWriter
type MockBlockReadWriterMockRecorder struct {
	mock *MockBlockReadWriter
}

// NewMockBlockReadWriter creates a new mock instance
func NewMockBlockReadWriter(ctrl *gomock.Controller) *MockBlockReadWriter {
	mock := &MockBlockReadWriter{ctrl: ctrl}
	mock.recorder = &MockBlockReadWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlockReadWriter) EXPECT() *MockBlockReadWriterMockRecorder {
	return m.recorder
}

// InsertBlock mocks base method
func (m *MockBlockReadWriter) InsertBlock(block *models.Block, propagate bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBlock", block, propagate)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBlock indicates an expected call of InsertBlock
func (mr *MockBlockReadWriterMockRecorder) InsertBlock(block, propagate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBlock", reflect.TypeOf((*MockBlockReadWriter)(nil).InsertBlock), block, propagate)
}

// ProcessBlock mocks base method
func (m *MockBlockReadWriter) ProcessBlock(block *models.Block, propagate bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessBlock", block, propagate)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessBlock indicates an expected call of ProcessBlock
func (mr *MockBlockReadWriterMockRecorder) ProcessBlock(block, propagate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessBlock", reflect.TypeOf((*MockBlockReadWriter)(nil).ProcessBlock), block, propagate)
}

// Start mocks base method
func (m *MockBlockReadWriter) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockBlockReadWriterMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockBlockReadWriter)(nil).Start))
}

// Stop mocks base method
func (m *MockBlockReadWriter) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockBlockReadWriterMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockBlockReadWriter)(nil).Stop))
}

// IsRunning mocks base method
func (m *MockBlockReadWriter) IsRunning() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRunning")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRunning indicates an expected call of IsRunning
func (mr *MockBlockReadWriterMockRecorder) IsRunning() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRunning", reflect.TypeOf((*MockBlockReadWriter)(nil).IsRunning))
}

// CurrentHeader mocks base method
func (m *MockBlockReadWriter) CurrentHeader() *models.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentHeader")
	ret0, _ := ret[0].(*models.Header)
	return ret0
}

// CurrentHeader indicates an expected call of CurrentHeader
func (mr *MockBlockReadWriterMockRecorder) CurrentHeader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentHeader", reflect.TypeOf((*MockBlockReadWriter)(nil).CurrentHeader))
}

// GetHeader mocks base method
func (m *MockBlockReadWriter) GetHeader(hash types.Hash, number uint64) *models.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeader", hash, number)
	ret0, _ := ret[0].(*models.Header)
	return ret0
}

// GetHeader indicates an expected call of GetHeader
func (mr *MockBlockReadWriterMockRecorder) GetHeader(hash, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeader", reflect.TypeOf((*MockBlockReadWriter)(nil).GetHeader), hash, number)
}

// GetHeaderByHash mocks base method
func (m *MockBlockReadWriter) GetHeaderByHash(hash types.Hash) *models.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeaderByHash", hash)
	ret0, _ := ret[0].(*models.Header)
	return ret0
}

// GetHeaderByHash indicates an expected call of GetHeaderByHash
func (mr *MockBlockReadWriterMockRecorder) GetHeaderByHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeaderByHash", reflect.TypeOf((*MockBlockReadWriter)(nil).GetHeaderByHash), hash)
}

// GetHeaderByNumber mocks base method
func (m *MockBlockReadWriter) GetHeaderByNumber(number uint64) *models.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeaderByNumber", number)
	ret0, _ := ret[0].(*models.Header)
	return ret0
}

// GetHeaderByNumber indicates an expected call of GetHeaderByNumber
func (mr *MockBlockReadWriterMockRecorder) GetHeaderByNumber(number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeaderByNumber", reflect.TypeOf((*MockBlockReadWriter)(nil).GetHeaderByNumber), number)
}

// HasHeader mocks base method
func (m *MockBlockReadWriter) HasHeader(hash types.Hash, number uint64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasHeader", hash, number)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasHeader indicates an expected call of HasHeader
func (mr *MockBlockReadWriterMockRecorder) HasHeader(hash, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasHeader", reflect.TypeOf((*MockBlockReadWriter)(nil).HasHeader), hash, number)
}

// CurrentBlock mocks base method
func (m *MockBlockReadWriter) CurrentBlock() *models.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentBlock")
	ret0, _ := ret[0].(*models.Block)
	return ret0
}

// CurrentBlock indicates an expected call of CurrentBlock
func (mr *MockBlockReadWriterMockRecorder) CurrentBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentBlock", reflect.TypeOf((*MockBlockReadWriter)(nil).CurrentBlock))
}

// GetBlock mocks base method
func (m *MockBlockReadWriter) GetBlock(hash types.Hash, number uint64) *models.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlock", hash, number)
	ret0, _ := ret[0].(*models.Block)
	return ret0
}

// GetBlock indicates an expected call of GetBlock
func (mr *MockBlockReadWriterMockRecorder) GetBlock(hash, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockBlockReadWriter)(nil).GetBlock), hash, number)
}

// GetBlockByHash mocks base method
func (m *MockBlockReadWriter) GetBlockByHash(hash types.Hash) *models.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByHash", hash)
	ret0, _ := ret[0].(*models.Block)
	return ret0
}

// GetBlockByHash indicates an expected call of GetBlockByHash
func (mr *MockBlockReadWriterMockRecorder) GetBlockByHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHash", reflect.TypeOf((*MockBlockReadWriter)(nil).GetBlockByHash), hash)
}

// GetBlockByNumber mocks base method
func (m *MockBlockReadWriter) GetBlockByNumber(number uint64) *models.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByNumber", number)
	ret0, _ := ret[0].(*models.Block)
	return ret0
}

// GetBlockByNumber indicates an expected call of GetBlockByNumber
func (mr *MockBlockReadWriterMockRecorder) GetBlockByNumber(number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByNumber", reflect.TypeOf((*MockBlockReadWriter)(nil).GetBlockByNumber), number)
}

// HasBlock mocks base method
func (m *MockBlockReadWriter) HasBlock(hash types.Hash, number uint64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasBlock", hash, number)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasBlock indicates an expected call of HasBlock
func (mr *MockBlockReadWriterMockRecorder) HasBlock(hash, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasBlock", reflect.TypeOf((*MockBlockReadWriter)(nil).HasBlock), hash, number)
}

// GetBlockHashesFromHash mocks base method
func (m *MockBlockReadWriter) GetBlockHashesFromHash(hash types.Hash, max uint64) []types.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockHashesFromHash", hash, max)
	ret0, _ := ret[0].([]types.Hash)
	return ret0
}

// GetBlockHashesFromHash indicates an expected call of GetBlockHashesFromHash
func (mr *MockBlockReadWriterMockRecorder) GetBlockHashesFromHash(hash, max interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHashesFromHash", reflect.TypeOf((*MockBlockReadWriter)(nil).GetBlockHashesFromHash), hash, max)
}

// GetBody mocks base method
func (m *MockBlockReadWriter) GetBody(hash types.Hash) *models.Body {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBody", hash)
	ret0, _ := ret[0].(*models.Body)
	return ret0
}

// GetBody indicates an expected call of GetBody
func (mr *MockBlockReadWriterMockRecorder) GetBody(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBody", reflect.TypeOf((*MockBlockReadWriter)(nil).GetBody), hash)
}

// ValidateBody mocks base method
func (m *MockBlockReadWriter) ValidateBody(block *models.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateBody", block)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateBody indicates an expected call of ValidateBody
func (mr *MockBlockReadWriterMockRecorder) ValidateBody(block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateBody", reflect.TypeOf((*MockBlockReadWriter)(nil).ValidateBody), block)
}

// GetAncestor mocks base method
func (m *MockBlockReadWriter) GetAncestor(hash types.Hash, number, ancestor uint64, maxNonCanonical *uint64) (types.Hash, uint64) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAncestor", hash, number, ancestor, maxNonCanonical)
	ret0, _ := ret[0].(types.Hash)
	ret1, _ := ret[1].(uint64)
	return ret0, ret1
}

// GetAncestor indicates an expected call of GetAncestor
func (mr *MockBlockReadWriterMockRecorder) GetAncestor(hash, number, ancestor, maxNonCanonical interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAncestor", reflect.TypeOf((*MockBlockReadWriter)(nil).GetAncestor), hash, number, ancestor, maxNonCanonical)
}

// SubscribeChainHeadEvent mocks base method
func (m *MockBlockReadWriter) SubscribeChainHeadEvent(ch chan<- eventtype.ChainHeadEvent) event.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeChainHeadEvent", ch)
	ret0, _ := ret[0].(event.Subscription)
	return ret0
}

// SubscribeChainHeadEvent indicates an expected call of SubscribeChainHeadEvent
func (mr *MockBlockReadWriterMockRecorder) SubscribeChainHeadEvent(ch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeChainHeadEvent", reflect.TypeOf((*MockBlockReadWriter)(nil).SubscribeChainHeadEvent), ch)
}

// MockBlockWriter is a mock of BlockWriter interface
type MockBlockWriter struct {
	ctrl     *gomock.Controller
	recorder *MockBlockWriterMockRecorder
}

// MockBlockWriterMockRecorder is the mock recorder for MockBlockWriter
type MockBlockWriterMockRecorder struct {
	mock *MockBlockWriter
}

// NewMockBlockWriter creates a new mock instance
func NewMockBlockWriter(ctrl *gomock.Controller) *MockBlockWriter {
	mock := &MockBlockWriter{ctrl: ctrl}
	mock.recorder = &MockBlockWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlockWriter) EXPECT() *MockBlockWriterMockRecorder {
	return m.recorder
}

// InsertBlock mocks base method
func (m *MockBlockWriter) InsertBlock(block *models.Block, propagate bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBlock", block, propagate)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBlock indicates an expected call of InsertBlock
func (mr *MockBlockWriterMockRecorder) InsertBlock(block, propagate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBlock", reflect.TypeOf((*MockBlockWriter)(nil).InsertBlock), block, propagate)
}

// ProcessBlock mocks base method
func (m *MockBlockWriter) ProcessBlock(block *models.Block, propagate bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessBlock", block, propagate)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessBlock indicates an expected call of ProcessBlock
func (mr *MockBlockWriterMockRecorder) ProcessBlock(block, propagate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessBlock", reflect.TypeOf((*MockBlockWriter)(nil).ProcessBlock), block, propagate)
}

// MockBlockReader is a mock of BlockReader interface
type MockBlockReader struct {
	ctrl     *gomock.Controller
	recorder *MockBlockReaderMockRecorder
}

// MockBlockReaderMockRecorder is the mock recorder for MockBlockReader
type MockBlockReaderMockRecorder struct {
	mock *MockBlockReader
}

// NewMockBlockReader creates a new mock instance
func NewMockBlockReader(ctrl *gomock.Controller) *MockBlockReader {
	mock := &MockBlockReader{ctrl: ctrl}
	mock.recorder = &MockBlockReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlockReader) EXPECT() *MockBlockReaderMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockBlockReader) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockBlockReaderMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockBlockReader)(nil).Start))
}

// Stop mocks base method
func (m *MockBlockReader) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockBlockReaderMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockBlockReader)(nil).Stop))
}

// IsRunning mocks base method
func (m *MockBlockReader) IsRunning() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRunning")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRunning indicates an expected call of IsRunning
func (mr *MockBlockReaderMockRecorder) IsRunning() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRunning", reflect.TypeOf((*MockBlockReader)(nil).IsRunning))
}

// CurrentHeader mocks base method
func (m *MockBlockReader) CurrentHeader() *models.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentHeader")
	ret0, _ := ret[0].(*models.Header)
	return ret0
}

// CurrentHeader indicates an expected call of CurrentHeader
func (mr *MockBlockReaderMockRecorder) CurrentHeader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentHeader", reflect.TypeOf((*MockBlockReader)(nil).CurrentHeader))
}

// GetHeader mocks base method
func (m *MockBlockReader) GetHeader(hash types.Hash, number uint64) *models.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeader", hash, number)
	ret0, _ := ret[0].(*models.Header)
	return ret0
}

// GetHeader indicates an expected call of GetHeader
func (mr *MockBlockReaderMockRecorder) GetHeader(hash, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeader", reflect.TypeOf((*MockBlockReader)(nil).GetHeader), hash, number)
}

// GetHeaderByHash mocks base method
func (m *MockBlockReader) GetHeaderByHash(hash types.Hash) *models.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeaderByHash", hash)
	ret0, _ := ret[0].(*models.Header)
	return ret0
}

// GetHeaderByHash indicates an expected call of GetHeaderByHash
func (mr *MockBlockReaderMockRecorder) GetHeaderByHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeaderByHash", reflect.TypeOf((*MockBlockReader)(nil).GetHeaderByHash), hash)
}

// GetHeaderByNumber mocks base method
func (m *MockBlockReader) GetHeaderByNumber(number uint64) *models.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeaderByNumber", number)
	ret0, _ := ret[0].(*models.Header)
	return ret0
}

// GetHeaderByNumber indicates an expected call of GetHeaderByNumber
func (mr *MockBlockReaderMockRecorder) GetHeaderByNumber(number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeaderByNumber", reflect.TypeOf((*MockBlockReader)(nil).GetHeaderByNumber), number)
}

// HasHeader mocks base method
func (m *MockBlockReader) HasHeader(hash types.Hash, number uint64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasHeader", hash, number)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasHeader indicates an expected call of HasHeader
func (mr *MockBlockReaderMockRecorder) HasHeader(hash, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasHeader", reflect.TypeOf((*MockBlockReader)(nil).HasHeader), hash, number)
}

// CurrentBlock mocks base method
func (m *MockBlockReader) CurrentBlock() *models.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentBlock")
	ret0, _ := ret[0].(*models.Block)
	return ret0
}

// CurrentBlock indicates an expected call of CurrentBlock
func (mr *MockBlockReaderMockRecorder) CurrentBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentBlock", reflect.TypeOf((*MockBlockReader)(nil).CurrentBlock))
}

// GetBlock mocks base method
func (m *MockBlockReader) GetBlock(hash types.Hash, number uint64) *models.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlock", hash, number)
	ret0, _ := ret[0].(*models.Block)
	return ret0
}

// GetBlock indicates an expected call of GetBlock
func (mr *MockBlockReaderMockRecorder) GetBlock(hash, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockBlockReader)(nil).GetBlock), hash, number)
}

// GetBlockByHash mocks base method
func (m *MockBlockReader) GetBlockByHash(hash types.Hash) *models.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByHash", hash)
	ret0, _ := ret[0].(*models.Block)
	return ret0
}

// GetBlockByHash indicates an expected call of GetBlockByHash
func (mr *MockBlockReaderMockRecorder) GetBlockByHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHash", reflect.TypeOf((*MockBlockReader)(nil).GetBlockByHash), hash)
}

// GetBlockByNumber mocks base method
func (m *MockBlockReader) GetBlockByNumber(number uint64) *models.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByNumber", number)
	ret0, _ := ret[0].(*models.Block)
	return ret0
}

// GetBlockByNumber indicates an expected call of GetBlockByNumber
func (mr *MockBlockReaderMockRecorder) GetBlockByNumber(number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByNumber", reflect.TypeOf((*MockBlockReader)(nil).GetBlockByNumber), number)
}

// HasBlock mocks base method
func (m *MockBlockReader) HasBlock(hash types.Hash, number uint64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasBlock", hash, number)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasBlock indicates an expected call of HasBlock
func (mr *MockBlockReaderMockRecorder) HasBlock(hash, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasBlock", reflect.TypeOf((*MockBlockReader)(nil).HasBlock), hash, number)
}

// GetBlockHashesFromHash mocks base method
func (m *MockBlockReader) GetBlockHashesFromHash(hash types.Hash, max uint64) []types.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockHashesFromHash", hash, max)
	ret0, _ := ret[0].([]types.Hash)
	return ret0
}

// GetBlockHashesFromHash indicates an expected call of GetBlockHashesFromHash
func (mr *MockBlockReaderMockRecorder) GetBlockHashesFromHash(hash, max interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHashesFromHash", reflect.TypeOf((*MockBlockReader)(nil).GetBlockHashesFromHash), hash, max)
}

// GetBody mocks base method
func (m *MockBlockReader) GetBody(hash types.Hash) *models.Body {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBody", hash)
	ret0, _ := ret[0].(*models.Body)
	return ret0
}

// GetBody indicates an expected call of GetBody
func (mr *MockBlockReaderMockRecorder) GetBody(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBody", reflect.TypeOf((*MockBlockReader)(nil).GetBody), hash)
}

// ValidateBody mocks base method
func (m *MockBlockReader) ValidateBody(block *models.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateBody", block)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateBody indicates an expected call of ValidateBody
func (mr *MockBlockReaderMockRecorder) ValidateBody(block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateBody", reflect.TypeOf((*MockBlockReader)(nil).ValidateBody), block)
}

// GetAncestor mocks base method
func (m *MockBlockReader) GetAncestor(hash types.Hash, number, ancestor uint64, maxNonCanonical *uint64) (types.Hash, uint64) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAncestor", hash, number, ancestor, maxNonCanonical)
	ret0, _ := ret[0].(types.Hash)
	ret1, _ := ret[1].(uint64)
	return ret0, ret1
}

// GetAncestor indicates an expected call of GetAncestor
func (mr *MockBlockReaderMockRecorder) GetAncestor(hash, number, ancestor, maxNonCanonical interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAncestor", reflect.TypeOf((*MockBlockReader)(nil).GetAncestor), hash, number, ancestor, maxNonCanonical)
}

// SubscribeChainHeadEvent mocks base method
func (m *MockBlockReader) SubscribeChainHeadEvent(ch chan<- eventtype.ChainHeadEvent) event.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeChainHeadEvent", ch)
	ret0, _ := ret[0].(event.Subscription)
	return ret0
}

// SubscribeChainHeadEvent indicates an expected call of SubscribeChainHeadEvent
func (mr *MockBlockReaderMockRecorder) SubscribeChainHeadEvent(ch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeChainHeadEvent", reflect.TypeOf((*MockBlockReader)(nil).SubscribeChainHeadEvent), ch)
}
