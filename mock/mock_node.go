// Code generated by MockGen. DO NOT EDIT.
// Source: protocol/node.go

// Package mock is a generated GoMock package.
package mock

import (
	kvstore "github.com/chain5j/chain5j-pkg/database/kvstore"
	types "github.com/chain5j/chain5j-pkg/types"
	protocol "github.com/chain5j/chain5j-protocol/protocol"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockNode is a mock of Node interface
type MockNode struct {
	ctrl     *gomock.Controller
	recorder *MockNodeMockRecorder
}

// MockNodeMockRecorder is the mock recorder for MockNode
type MockNodeMockRecorder struct {
	mock *MockNode
}

// NewMockNode creates a new mock instance
func NewMockNode(ctrl *gomock.Controller) *MockNode {
	mock := &MockNode{ctrl: ctrl}
	mock.recorder = &MockNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNode) EXPECT() *MockNodeMockRecorder {
	return m.recorder
}

// Init mocks base method
func (m *MockNode) Init() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (mr *MockNodeMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockNode)(nil).Init))
}

// Start mocks base method
func (m *MockNode) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockNodeMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockNode)(nil).Start))
}

// Stop mocks base method
func (m *MockNode) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockNodeMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockNode)(nil).Stop))
}

// Wait mocks base method
func (m *MockNode) Wait() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Wait")
}

// Wait indicates an expected call of Wait
func (mr *MockNodeMockRecorder) Wait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockNode)(nil).Wait))
}

// Database mocks base method
func (m *MockNode) Database() protocol.Database {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Database")
	ret0, _ := ret[0].(protocol.Database)
	return ret0
}

// Database indicates an expected call of Database
func (mr *MockNodeMockRecorder) Database() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Database", reflect.TypeOf((*MockNode)(nil).Database))
}

// KVDatabase mocks base method
func (m *MockNode) KVDatabase() kvstore.Database {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KVDatabase")
	ret0, _ := ret[0].(kvstore.Database)
	return ret0
}

// KVDatabase indicates an expected call of KVDatabase
func (mr *MockNodeMockRecorder) KVDatabase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KVDatabase", reflect.TypeOf((*MockNode)(nil).KVDatabase))
}

// Config mocks base method
func (m *MockNode) Config() protocol.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(protocol.Config)
	return ret0
}

// Config indicates an expected call of Config
func (mr *MockNodeMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockNode)(nil).Config))
}

// BlockReadWriter mocks base method
func (m *MockNode) BlockReadWriter() protocol.BlockReadWriter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockReadWriter")
	ret0, _ := ret[0].(protocol.BlockReadWriter)
	return ret0
}

// BlockReadWriter indicates an expected call of BlockReadWriter
func (mr *MockNodeMockRecorder) BlockReadWriter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockReadWriter", reflect.TypeOf((*MockNode)(nil).BlockReadWriter))
}

// NodeKey mocks base method
func (m *MockNode) NodeKey() protocol.NodeKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeKey")
	ret0, _ := ret[0].(protocol.NodeKey)
	return ret0
}

// NodeKey indicates an expected call of NodeKey
func (mr *MockNodeMockRecorder) NodeKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeKey", reflect.TypeOf((*MockNode)(nil).NodeKey))
}

// Apps mocks base method
func (m *MockNode) Apps() protocol.Apps {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apps")
	ret0, _ := ret[0].(protocol.Apps)
	return ret0
}

// Apps indicates an expected call of Apps
func (mr *MockNodeMockRecorder) Apps() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apps", reflect.TypeOf((*MockNode)(nil).Apps))
}

// APIs mocks base method
func (m *MockNode) APIs() protocol.APIs {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIs")
	ret0, _ := ret[0].(protocol.APIs)
	return ret0
}

// APIs indicates an expected call of APIs
func (mr *MockNodeMockRecorder) APIs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIs", reflect.TypeOf((*MockNode)(nil).APIs))
}

// AddTxPool mocks base method
func (m *MockNode) AddTxPool(txType types.TxType, txPool protocol.TxPool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddTxPool", txType, txPool)
}

// AddTxPool indicates an expected call of AddTxPool
func (mr *MockNodeMockRecorder) AddTxPool(txType, txPool interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTxPool", reflect.TypeOf((*MockNode)(nil).AddTxPool), txType, txPool)
}

// SetConsensus mocks base method
func (m *MockNode) SetConsensus(consensus protocol.Consensus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConsensus", consensus)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConsensus indicates an expected call of SetConsensus
func (mr *MockNodeMockRecorder) SetConsensus(consensus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConsensus", reflect.TypeOf((*MockNode)(nil).SetConsensus), consensus)
}
