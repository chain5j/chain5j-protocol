// Code generated by MockGen. DO NOT EDIT.
// Source: protocol/database.go

// Package mock is a generated GoMock package.
package mock

import (
	types "github.com/chain5j/chain5j-pkg/types"
	models "github.com/chain5j/chain5j-protocol/models"
	statetype "github.com/chain5j/chain5j-protocol/models/statetype"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDatabase is a mock of Database interface
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockDatabase) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockDatabaseMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockDatabase)(nil).Start))
}

// Stop mocks base method
func (m *MockDatabase) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockDatabaseMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockDatabase)(nil).Stop))
}

// ChainConfig mocks base method
func (m *MockDatabase) ChainConfig() (*models.ChainConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainConfig")
	ret0, _ := ret[0].(*models.ChainConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChainConfig indicates an expected call of ChainConfig
func (mr *MockDatabaseMockRecorder) ChainConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainConfig", reflect.TypeOf((*MockDatabase)(nil).ChainConfig))
}

// GetChainConfig mocks base method
func (m *MockDatabase) GetChainConfig(hash types.Hash, height uint64) (*models.ChainConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainConfig", hash, height)
	ret0, _ := ret[0].(*models.ChainConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChainConfig indicates an expected call of GetChainConfig
func (mr *MockDatabaseMockRecorder) GetChainConfig(hash, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainConfig", reflect.TypeOf((*MockDatabase)(nil).GetChainConfig), hash, height)
}

// GetChainConfigByHash mocks base method
func (m *MockDatabase) GetChainConfigByHash(hash types.Hash) (*models.ChainConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainConfigByHash", hash)
	ret0, _ := ret[0].(*models.ChainConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChainConfigByHash indicates an expected call of GetChainConfigByHash
func (mr *MockDatabaseMockRecorder) GetChainConfigByHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainConfigByHash", reflect.TypeOf((*MockDatabase)(nil).GetChainConfigByHash), hash)
}

// GetChainConfigByHeight mocks base method
func (m *MockDatabase) GetChainConfigByHeight(height uint64) (*models.ChainConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainConfigByHeight", height)
	ret0, _ := ret[0].(*models.ChainConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChainConfigByHeight indicates an expected call of GetChainConfigByHeight
func (mr *MockDatabaseMockRecorder) GetChainConfigByHeight(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainConfigByHeight", reflect.TypeOf((*MockDatabase)(nil).GetChainConfigByHeight), height)
}

// LatestHeader mocks base method
func (m *MockDatabase) LatestHeader() (*models.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LatestHeader")
	ret0, _ := ret[0].(*models.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LatestHeader indicates an expected call of LatestHeader
func (mr *MockDatabaseMockRecorder) LatestHeader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestHeader", reflect.TypeOf((*MockDatabase)(nil).LatestHeader))
}

// GetHeader mocks base method
func (m *MockDatabase) GetHeader(hash types.Hash, height uint64) (*models.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeader", hash, height)
	ret0, _ := ret[0].(*models.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeader indicates an expected call of GetHeader
func (mr *MockDatabaseMockRecorder) GetHeader(hash, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeader", reflect.TypeOf((*MockDatabase)(nil).GetHeader), hash, height)
}

// GetHeaderByHash mocks base method
func (m *MockDatabase) GetHeaderByHash(hash types.Hash) (*models.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeaderByHash", hash)
	ret0, _ := ret[0].(*models.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeaderByHash indicates an expected call of GetHeaderByHash
func (mr *MockDatabaseMockRecorder) GetHeaderByHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeaderByHash", reflect.TypeOf((*MockDatabase)(nil).GetHeaderByHash), hash)
}

// GetHeaderByHeight mocks base method
func (m *MockDatabase) GetHeaderByHeight(height uint64) (*models.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeaderByHeight", height)
	ret0, _ := ret[0].(*models.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeaderByHeight indicates an expected call of GetHeaderByHeight
func (mr *MockDatabaseMockRecorder) GetHeaderByHeight(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeaderByHeight", reflect.TypeOf((*MockDatabase)(nil).GetHeaderByHeight), height)
}

// GetHeaderHeight mocks base method
func (m *MockDatabase) GetHeaderHeight(hash types.Hash) (*uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeaderHeight", hash)
	ret0, _ := ret[0].(*uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeaderHeight indicates an expected call of GetHeaderHeight
func (mr *MockDatabaseMockRecorder) GetHeaderHeight(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeaderHeight", reflect.TypeOf((*MockDatabase)(nil).GetHeaderHeight), hash)
}

// HasHeader mocks base method
func (m *MockDatabase) HasHeader(hash types.Hash, height uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasHeader", hash, height)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasHeader indicates an expected call of HasHeader
func (mr *MockDatabaseMockRecorder) HasHeader(hash, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasHeader", reflect.TypeOf((*MockDatabase)(nil).HasHeader), hash, height)
}

// CurrentBlock mocks base method
func (m *MockDatabase) CurrentBlock() (*models.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentBlock")
	ret0, _ := ret[0].(*models.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentBlock indicates an expected call of CurrentBlock
func (mr *MockDatabaseMockRecorder) CurrentBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentBlock", reflect.TypeOf((*MockDatabase)(nil).CurrentBlock))
}

// GetBlock mocks base method
func (m *MockDatabase) GetBlock(hash types.Hash, height uint64) (*models.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlock", hash, height)
	ret0, _ := ret[0].(*models.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlock indicates an expected call of GetBlock
func (mr *MockDatabaseMockRecorder) GetBlock(hash, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockDatabase)(nil).GetBlock), hash, height)
}

// GetBlockByHash mocks base method
func (m *MockDatabase) GetBlockByHash(hash types.Hash) (*models.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByHash", hash)
	ret0, _ := ret[0].(*models.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByHash indicates an expected call of GetBlockByHash
func (mr *MockDatabaseMockRecorder) GetBlockByHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHash", reflect.TypeOf((*MockDatabase)(nil).GetBlockByHash), hash)
}

// GetBlockByHeight mocks base method
func (m *MockDatabase) GetBlockByHeight(height uint64) (*models.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByHeight", height)
	ret0, _ := ret[0].(*models.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByHeight indicates an expected call of GetBlockByHeight
func (mr *MockDatabaseMockRecorder) GetBlockByHeight(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHeight", reflect.TypeOf((*MockDatabase)(nil).GetBlockByHeight), height)
}

// HasBlock mocks base method
func (m *MockDatabase) HasBlock(hash types.Hash, number uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasBlock", hash, number)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasBlock indicates an expected call of HasBlock
func (mr *MockDatabaseMockRecorder) HasBlock(hash, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasBlock", reflect.TypeOf((*MockDatabase)(nil).HasBlock), hash, number)
}

// GetCanonicalHash mocks base method
func (m *MockDatabase) GetCanonicalHash(height uint64) (types.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCanonicalHash", height)
	ret0, _ := ret[0].(types.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCanonicalHash indicates an expected call of GetCanonicalHash
func (mr *MockDatabaseMockRecorder) GetCanonicalHash(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCanonicalHash", reflect.TypeOf((*MockDatabase)(nil).GetCanonicalHash), height)
}

// LatestBlockHash mocks base method
func (m *MockDatabase) LatestBlockHash() (types.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LatestBlockHash")
	ret0, _ := ret[0].(types.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LatestBlockHash indicates an expected call of LatestBlockHash
func (mr *MockDatabaseMockRecorder) LatestBlockHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestBlockHash", reflect.TypeOf((*MockDatabase)(nil).LatestBlockHash))
}

// LatestHeaderHash mocks base method
func (m *MockDatabase) LatestHeaderHash() (types.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LatestHeaderHash")
	ret0, _ := ret[0].(types.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LatestHeaderHash indicates an expected call of LatestHeaderHash
func (mr *MockDatabaseMockRecorder) LatestHeaderHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestHeaderHash", reflect.TypeOf((*MockDatabase)(nil).LatestHeaderHash))
}

// GetBody mocks base method
func (m *MockDatabase) GetBody(hash types.Hash, height uint64) (*models.Body, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBody", hash, height)
	ret0, _ := ret[0].(*models.Body)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBody indicates an expected call of GetBody
func (mr *MockDatabaseMockRecorder) GetBody(hash, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBody", reflect.TypeOf((*MockDatabase)(nil).GetBody), hash, height)
}

// GetTransaction mocks base method
func (m *MockDatabase) GetTransaction(hash types.Hash) (models.Transaction, types.Hash, uint64, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", hash)
	ret0, _ := ret[0].(models.Transaction)
	ret1, _ := ret[1].(types.Hash)
	ret2, _ := ret[2].(uint64)
	ret3, _ := ret[3].(uint64)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// GetTransaction indicates an expected call of GetTransaction
func (mr *MockDatabaseMockRecorder) GetTransaction(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockDatabase)(nil).GetTransaction), hash)
}

// GetReceipts mocks base method
func (m *MockDatabase) GetReceipts(bHash types.Hash, height uint64) (statetype.Receipts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceipts", bHash, height)
	ret0, _ := ret[0].(statetype.Receipts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReceipts indicates an expected call of GetReceipts
func (mr *MockDatabaseMockRecorder) GetReceipts(bHash, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceipts", reflect.TypeOf((*MockDatabase)(nil).GetReceipts), bHash, height)
}

// WriteBlock mocks base method
func (m *MockDatabase) WriteBlock(block *models.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteBlock", block)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteBlock indicates an expected call of WriteBlock
func (mr *MockDatabaseMockRecorder) WriteBlock(block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteBlock", reflect.TypeOf((*MockDatabase)(nil).WriteBlock), block)
}

// WriteHeader mocks base method
func (m *MockDatabase) WriteHeader(header *models.Header) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteHeader", header)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteHeader indicates an expected call of WriteHeader
func (mr *MockDatabaseMockRecorder) WriteHeader(header interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteHeader", reflect.TypeOf((*MockDatabase)(nil).WriteHeader), header)
}

// WriteChainConfig mocks base method
func (m *MockDatabase) WriteChainConfig(bHash types.Hash, height uint64, chainConfig *models.ChainConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteChainConfig", bHash, height, chainConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteChainConfig indicates an expected call of WriteChainConfig
func (mr *MockDatabaseMockRecorder) WriteChainConfig(bHash, height, chainConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteChainConfig", reflect.TypeOf((*MockDatabase)(nil).WriteChainConfig), bHash, height, chainConfig)
}

// WriteLatestBlockHash mocks base method
func (m *MockDatabase) WriteLatestBlockHash(bHash types.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteLatestBlockHash", bHash)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteLatestBlockHash indicates an expected call of WriteLatestBlockHash
func (mr *MockDatabaseMockRecorder) WriteLatestBlockHash(bHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteLatestBlockHash", reflect.TypeOf((*MockDatabase)(nil).WriteLatestBlockHash), bHash)
}

// WriteLatestHeaderHash mocks base method
func (m *MockDatabase) WriteLatestHeaderHash(bHash types.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteLatestHeaderHash", bHash)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteLatestHeaderHash indicates an expected call of WriteLatestHeaderHash
func (mr *MockDatabaseMockRecorder) WriteLatestHeaderHash(bHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteLatestHeaderHash", reflect.TypeOf((*MockDatabase)(nil).WriteLatestHeaderHash), bHash)
}

// WriteCanonicalHash mocks base method
func (m *MockDatabase) WriteCanonicalHash(bHash types.Hash, height uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteCanonicalHash", bHash, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteCanonicalHash indicates an expected call of WriteCanonicalHash
func (mr *MockDatabaseMockRecorder) WriteCanonicalHash(bHash, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteCanonicalHash", reflect.TypeOf((*MockDatabase)(nil).WriteCanonicalHash), bHash, height)
}

// WriteTxsLookup mocks base method
func (m *MockDatabase) WriteTxsLookup(block *models.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteTxsLookup", block)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteTxsLookup indicates an expected call of WriteTxsLookup
func (mr *MockDatabaseMockRecorder) WriteTxsLookup(block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteTxsLookup", reflect.TypeOf((*MockDatabase)(nil).WriteTxsLookup), block)
}

// WriteReceipts mocks base method
func (m *MockDatabase) WriteReceipts(bHash types.Hash, height uint64, receipts statetype.Receipts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteReceipts", bHash, height, receipts)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteReceipts indicates an expected call of WriteReceipts
func (mr *MockDatabaseMockRecorder) WriteReceipts(bHash, height, receipts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteReceipts", reflect.TypeOf((*MockDatabase)(nil).WriteReceipts), bHash, height, receipts)
}

// DeleteBlock mocks base method
func (m *MockDatabase) DeleteBlock(blockAbs []models.BlockAbstract, currentHeight, desHeight uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBlock", blockAbs, currentHeight, desHeight)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBlock indicates an expected call of DeleteBlock
func (mr *MockDatabaseMockRecorder) DeleteBlock(blockAbs, currentHeight, desHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBlock", reflect.TypeOf((*MockDatabase)(nil).DeleteBlock), blockAbs, currentHeight, desHeight)
}

// MockDatabaseReader is a mock of DatabaseReader interface
type MockDatabaseReader struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseReaderMockRecorder
}

// MockDatabaseReaderMockRecorder is the mock recorder for MockDatabaseReader
type MockDatabaseReaderMockRecorder struct {
	mock *MockDatabaseReader
}

// NewMockDatabaseReader creates a new mock instance
func NewMockDatabaseReader(ctrl *gomock.Controller) *MockDatabaseReader {
	mock := &MockDatabaseReader{ctrl: ctrl}
	mock.recorder = &MockDatabaseReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabaseReader) EXPECT() *MockDatabaseReaderMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockDatabaseReader) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockDatabaseReaderMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockDatabaseReader)(nil).Start))
}

// Stop mocks base method
func (m *MockDatabaseReader) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockDatabaseReaderMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockDatabaseReader)(nil).Stop))
}

// ChainConfig mocks base method
func (m *MockDatabaseReader) ChainConfig() (*models.ChainConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainConfig")
	ret0, _ := ret[0].(*models.ChainConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChainConfig indicates an expected call of ChainConfig
func (mr *MockDatabaseReaderMockRecorder) ChainConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainConfig", reflect.TypeOf((*MockDatabaseReader)(nil).ChainConfig))
}

// GetChainConfig mocks base method
func (m *MockDatabaseReader) GetChainConfig(hash types.Hash, height uint64) (*models.ChainConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainConfig", hash, height)
	ret0, _ := ret[0].(*models.ChainConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChainConfig indicates an expected call of GetChainConfig
func (mr *MockDatabaseReaderMockRecorder) GetChainConfig(hash, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainConfig", reflect.TypeOf((*MockDatabaseReader)(nil).GetChainConfig), hash, height)
}

// GetChainConfigByHash mocks base method
func (m *MockDatabaseReader) GetChainConfigByHash(hash types.Hash) (*models.ChainConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainConfigByHash", hash)
	ret0, _ := ret[0].(*models.ChainConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChainConfigByHash indicates an expected call of GetChainConfigByHash
func (mr *MockDatabaseReaderMockRecorder) GetChainConfigByHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainConfigByHash", reflect.TypeOf((*MockDatabaseReader)(nil).GetChainConfigByHash), hash)
}

// GetChainConfigByHeight mocks base method
func (m *MockDatabaseReader) GetChainConfigByHeight(height uint64) (*models.ChainConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainConfigByHeight", height)
	ret0, _ := ret[0].(*models.ChainConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChainConfigByHeight indicates an expected call of GetChainConfigByHeight
func (mr *MockDatabaseReaderMockRecorder) GetChainConfigByHeight(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainConfigByHeight", reflect.TypeOf((*MockDatabaseReader)(nil).GetChainConfigByHeight), height)
}

// LatestHeader mocks base method
func (m *MockDatabaseReader) LatestHeader() (*models.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LatestHeader")
	ret0, _ := ret[0].(*models.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LatestHeader indicates an expected call of LatestHeader
func (mr *MockDatabaseReaderMockRecorder) LatestHeader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestHeader", reflect.TypeOf((*MockDatabaseReader)(nil).LatestHeader))
}

// GetHeader mocks base method
func (m *MockDatabaseReader) GetHeader(hash types.Hash, height uint64) (*models.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeader", hash, height)
	ret0, _ := ret[0].(*models.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeader indicates an expected call of GetHeader
func (mr *MockDatabaseReaderMockRecorder) GetHeader(hash, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeader", reflect.TypeOf((*MockDatabaseReader)(nil).GetHeader), hash, height)
}

// GetHeaderByHash mocks base method
func (m *MockDatabaseReader) GetHeaderByHash(hash types.Hash) (*models.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeaderByHash", hash)
	ret0, _ := ret[0].(*models.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeaderByHash indicates an expected call of GetHeaderByHash
func (mr *MockDatabaseReaderMockRecorder) GetHeaderByHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeaderByHash", reflect.TypeOf((*MockDatabaseReader)(nil).GetHeaderByHash), hash)
}

// GetHeaderByHeight mocks base method
func (m *MockDatabaseReader) GetHeaderByHeight(height uint64) (*models.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeaderByHeight", height)
	ret0, _ := ret[0].(*models.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeaderByHeight indicates an expected call of GetHeaderByHeight
func (mr *MockDatabaseReaderMockRecorder) GetHeaderByHeight(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeaderByHeight", reflect.TypeOf((*MockDatabaseReader)(nil).GetHeaderByHeight), height)
}

// GetHeaderHeight mocks base method
func (m *MockDatabaseReader) GetHeaderHeight(hash types.Hash) (*uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeaderHeight", hash)
	ret0, _ := ret[0].(*uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeaderHeight indicates an expected call of GetHeaderHeight
func (mr *MockDatabaseReaderMockRecorder) GetHeaderHeight(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeaderHeight", reflect.TypeOf((*MockDatabaseReader)(nil).GetHeaderHeight), hash)
}

// HasHeader mocks base method
func (m *MockDatabaseReader) HasHeader(hash types.Hash, height uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasHeader", hash, height)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasHeader indicates an expected call of HasHeader
func (mr *MockDatabaseReaderMockRecorder) HasHeader(hash, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasHeader", reflect.TypeOf((*MockDatabaseReader)(nil).HasHeader), hash, height)
}

// CurrentBlock mocks base method
func (m *MockDatabaseReader) CurrentBlock() (*models.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentBlock")
	ret0, _ := ret[0].(*models.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentBlock indicates an expected call of CurrentBlock
func (mr *MockDatabaseReaderMockRecorder) CurrentBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentBlock", reflect.TypeOf((*MockDatabaseReader)(nil).CurrentBlock))
}

// GetBlock mocks base method
func (m *MockDatabaseReader) GetBlock(hash types.Hash, height uint64) (*models.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlock", hash, height)
	ret0, _ := ret[0].(*models.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlock indicates an expected call of GetBlock
func (mr *MockDatabaseReaderMockRecorder) GetBlock(hash, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockDatabaseReader)(nil).GetBlock), hash, height)
}

// GetBlockByHash mocks base method
func (m *MockDatabaseReader) GetBlockByHash(hash types.Hash) (*models.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByHash", hash)
	ret0, _ := ret[0].(*models.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByHash indicates an expected call of GetBlockByHash
func (mr *MockDatabaseReaderMockRecorder) GetBlockByHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHash", reflect.TypeOf((*MockDatabaseReader)(nil).GetBlockByHash), hash)
}

// GetBlockByHeight mocks base method
func (m *MockDatabaseReader) GetBlockByHeight(height uint64) (*models.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByHeight", height)
	ret0, _ := ret[0].(*models.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByHeight indicates an expected call of GetBlockByHeight
func (mr *MockDatabaseReaderMockRecorder) GetBlockByHeight(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHeight", reflect.TypeOf((*MockDatabaseReader)(nil).GetBlockByHeight), height)
}

// HasBlock mocks base method
func (m *MockDatabaseReader) HasBlock(hash types.Hash, number uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasBlock", hash, number)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasBlock indicates an expected call of HasBlock
func (mr *MockDatabaseReaderMockRecorder) HasBlock(hash, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasBlock", reflect.TypeOf((*MockDatabaseReader)(nil).HasBlock), hash, number)
}

// GetCanonicalHash mocks base method
func (m *MockDatabaseReader) GetCanonicalHash(height uint64) (types.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCanonicalHash", height)
	ret0, _ := ret[0].(types.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCanonicalHash indicates an expected call of GetCanonicalHash
func (mr *MockDatabaseReaderMockRecorder) GetCanonicalHash(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCanonicalHash", reflect.TypeOf((*MockDatabaseReader)(nil).GetCanonicalHash), height)
}

// LatestBlockHash mocks base method
func (m *MockDatabaseReader) LatestBlockHash() (types.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LatestBlockHash")
	ret0, _ := ret[0].(types.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LatestBlockHash indicates an expected call of LatestBlockHash
func (mr *MockDatabaseReaderMockRecorder) LatestBlockHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestBlockHash", reflect.TypeOf((*MockDatabaseReader)(nil).LatestBlockHash))
}

// LatestHeaderHash mocks base method
func (m *MockDatabaseReader) LatestHeaderHash() (types.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LatestHeaderHash")
	ret0, _ := ret[0].(types.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LatestHeaderHash indicates an expected call of LatestHeaderHash
func (mr *MockDatabaseReaderMockRecorder) LatestHeaderHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestHeaderHash", reflect.TypeOf((*MockDatabaseReader)(nil).LatestHeaderHash))
}

// GetBody mocks base method
func (m *MockDatabaseReader) GetBody(hash types.Hash, height uint64) (*models.Body, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBody", hash, height)
	ret0, _ := ret[0].(*models.Body)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBody indicates an expected call of GetBody
func (mr *MockDatabaseReaderMockRecorder) GetBody(hash, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBody", reflect.TypeOf((*MockDatabaseReader)(nil).GetBody), hash, height)
}

// GetTransaction mocks base method
func (m *MockDatabaseReader) GetTransaction(hash types.Hash) (models.Transaction, types.Hash, uint64, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", hash)
	ret0, _ := ret[0].(models.Transaction)
	ret1, _ := ret[1].(types.Hash)
	ret2, _ := ret[2].(uint64)
	ret3, _ := ret[3].(uint64)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// GetTransaction indicates an expected call of GetTransaction
func (mr *MockDatabaseReaderMockRecorder) GetTransaction(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockDatabaseReader)(nil).GetTransaction), hash)
}

// GetReceipts mocks base method
func (m *MockDatabaseReader) GetReceipts(bHash types.Hash, height uint64) (statetype.Receipts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceipts", bHash, height)
	ret0, _ := ret[0].(statetype.Receipts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReceipts indicates an expected call of GetReceipts
func (mr *MockDatabaseReaderMockRecorder) GetReceipts(bHash, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceipts", reflect.TypeOf((*MockDatabaseReader)(nil).GetReceipts), bHash, height)
}

// MockDatabaseWriter is a mock of DatabaseWriter interface
type MockDatabaseWriter struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseWriterMockRecorder
}

// MockDatabaseWriterMockRecorder is the mock recorder for MockDatabaseWriter
type MockDatabaseWriterMockRecorder struct {
	mock *MockDatabaseWriter
}

// NewMockDatabaseWriter creates a new mock instance
func NewMockDatabaseWriter(ctrl *gomock.Controller) *MockDatabaseWriter {
	mock := &MockDatabaseWriter{ctrl: ctrl}
	mock.recorder = &MockDatabaseWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabaseWriter) EXPECT() *MockDatabaseWriterMockRecorder {
	return m.recorder
}

// WriteBlock mocks base method
func (m *MockDatabaseWriter) WriteBlock(block *models.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteBlock", block)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteBlock indicates an expected call of WriteBlock
func (mr *MockDatabaseWriterMockRecorder) WriteBlock(block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteBlock", reflect.TypeOf((*MockDatabaseWriter)(nil).WriteBlock), block)
}

// WriteHeader mocks base method
func (m *MockDatabaseWriter) WriteHeader(header *models.Header) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteHeader", header)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteHeader indicates an expected call of WriteHeader
func (mr *MockDatabaseWriterMockRecorder) WriteHeader(header interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteHeader", reflect.TypeOf((*MockDatabaseWriter)(nil).WriteHeader), header)
}

// WriteChainConfig mocks base method
func (m *MockDatabaseWriter) WriteChainConfig(bHash types.Hash, height uint64, chainConfig *models.ChainConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteChainConfig", bHash, height, chainConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteChainConfig indicates an expected call of WriteChainConfig
func (mr *MockDatabaseWriterMockRecorder) WriteChainConfig(bHash, height, chainConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteChainConfig", reflect.TypeOf((*MockDatabaseWriter)(nil).WriteChainConfig), bHash, height, chainConfig)
}

// WriteLatestBlockHash mocks base method
func (m *MockDatabaseWriter) WriteLatestBlockHash(bHash types.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteLatestBlockHash", bHash)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteLatestBlockHash indicates an expected call of WriteLatestBlockHash
func (mr *MockDatabaseWriterMockRecorder) WriteLatestBlockHash(bHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteLatestBlockHash", reflect.TypeOf((*MockDatabaseWriter)(nil).WriteLatestBlockHash), bHash)
}

// WriteLatestHeaderHash mocks base method
func (m *MockDatabaseWriter) WriteLatestHeaderHash(bHash types.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteLatestHeaderHash", bHash)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteLatestHeaderHash indicates an expected call of WriteLatestHeaderHash
func (mr *MockDatabaseWriterMockRecorder) WriteLatestHeaderHash(bHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteLatestHeaderHash", reflect.TypeOf((*MockDatabaseWriter)(nil).WriteLatestHeaderHash), bHash)
}

// WriteCanonicalHash mocks base method
func (m *MockDatabaseWriter) WriteCanonicalHash(bHash types.Hash, height uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteCanonicalHash", bHash, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteCanonicalHash indicates an expected call of WriteCanonicalHash
func (mr *MockDatabaseWriterMockRecorder) WriteCanonicalHash(bHash, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteCanonicalHash", reflect.TypeOf((*MockDatabaseWriter)(nil).WriteCanonicalHash), bHash, height)
}

// WriteTxsLookup mocks base method
func (m *MockDatabaseWriter) WriteTxsLookup(block *models.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteTxsLookup", block)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteTxsLookup indicates an expected call of WriteTxsLookup
func (mr *MockDatabaseWriterMockRecorder) WriteTxsLookup(block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteTxsLookup", reflect.TypeOf((*MockDatabaseWriter)(nil).WriteTxsLookup), block)
}

// WriteReceipts mocks base method
func (m *MockDatabaseWriter) WriteReceipts(bHash types.Hash, height uint64, receipts statetype.Receipts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteReceipts", bHash, height, receipts)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteReceipts indicates an expected call of WriteReceipts
func (mr *MockDatabaseWriterMockRecorder) WriteReceipts(bHash, height, receipts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteReceipts", reflect.TypeOf((*MockDatabaseWriter)(nil).WriteReceipts), bHash, height, receipts)
}

// DeleteBlock mocks base method
func (m *MockDatabaseWriter) DeleteBlock(blockAbs []models.BlockAbstract, currentHeight, desHeight uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBlock", blockAbs, currentHeight, desHeight)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBlock indicates an expected call of DeleteBlock
func (mr *MockDatabaseWriterMockRecorder) DeleteBlock(blockAbs, currentHeight, desHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBlock", reflect.TypeOf((*MockDatabaseWriter)(nil).DeleteBlock), blockAbs, currentHeight, desHeight)
}

// MockKVStore is a mock of KVStore interface
type MockKVStore struct {
	ctrl     *gomock.Controller
	recorder *MockKVStoreMockRecorder
}

// MockKVStoreMockRecorder is the mock recorder for MockKVStore
type MockKVStoreMockRecorder struct {
	mock *MockKVStore
}

// NewMockKVStore creates a new mock instance
func NewMockKVStore(ctrl *gomock.Controller) *MockKVStore {
	mock := &MockKVStore{ctrl: ctrl}
	mock.recorder = &MockKVStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKVStore) EXPECT() *MockKVStoreMockRecorder {
	return m.recorder
}

// Has mocks base method
func (m *MockKVStore) Has(key []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Has indicates an expected call of Has
func (mr *MockKVStoreMockRecorder) Has(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockKVStore)(nil).Has), key)
}

// Get mocks base method
func (m *MockKVStore) Get(key []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockKVStoreMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKVStore)(nil).Get), key)
}

// Put mocks base method
func (m *MockKVStore) Put(key, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put
func (mr *MockKVStoreMockRecorder) Put(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockKVStore)(nil).Put), key, value)
}

// Delete mocks base method
func (m *MockKVStore) Delete(key []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockKVStoreMockRecorder) Delete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockKVStore)(nil).Delete), key)
}

// MockKVStoreReader is a mock of KVStoreReader interface
type MockKVStoreReader struct {
	ctrl     *gomock.Controller
	recorder *MockKVStoreReaderMockRecorder
}

// MockKVStoreReaderMockRecorder is the mock recorder for MockKVStoreReader
type MockKVStoreReaderMockRecorder struct {
	mock *MockKVStoreReader
}

// NewMockKVStoreReader creates a new mock instance
func NewMockKVStoreReader(ctrl *gomock.Controller) *MockKVStoreReader {
	mock := &MockKVStoreReader{ctrl: ctrl}
	mock.recorder = &MockKVStoreReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKVStoreReader) EXPECT() *MockKVStoreReaderMockRecorder {
	return m.recorder
}

// Has mocks base method
func (m *MockKVStoreReader) Has(key []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Has indicates an expected call of Has
func (mr *MockKVStoreReaderMockRecorder) Has(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockKVStoreReader)(nil).Has), key)
}

// Get mocks base method
func (m *MockKVStoreReader) Get(key []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockKVStoreReaderMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKVStoreReader)(nil).Get), key)
}

// MockKVStoreWriter is a mock of KVStoreWriter interface
type MockKVStoreWriter struct {
	ctrl     *gomock.Controller
	recorder *MockKVStoreWriterMockRecorder
}

// MockKVStoreWriterMockRecorder is the mock recorder for MockKVStoreWriter
type MockKVStoreWriterMockRecorder struct {
	mock *MockKVStoreWriter
}

// NewMockKVStoreWriter creates a new mock instance
func NewMockKVStoreWriter(ctrl *gomock.Controller) *MockKVStoreWriter {
	mock := &MockKVStoreWriter{ctrl: ctrl}
	mock.recorder = &MockKVStoreWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKVStoreWriter) EXPECT() *MockKVStoreWriterMockRecorder {
	return m.recorder
}

// Put mocks base method
func (m *MockKVStoreWriter) Put(key, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put
func (mr *MockKVStoreWriterMockRecorder) Put(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockKVStoreWriter)(nil).Put), key, value)
}

// MockKVStoreDeleter is a mock of KVStoreDeleter interface
type MockKVStoreDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockKVStoreDeleterMockRecorder
}

// MockKVStoreDeleterMockRecorder is the mock recorder for MockKVStoreDeleter
type MockKVStoreDeleterMockRecorder struct {
	mock *MockKVStoreDeleter
}

// NewMockKVStoreDeleter creates a new mock instance
func NewMockKVStoreDeleter(ctrl *gomock.Controller) *MockKVStoreDeleter {
	mock := &MockKVStoreDeleter{ctrl: ctrl}
	mock.recorder = &MockKVStoreDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKVStoreDeleter) EXPECT() *MockKVStoreDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockKVStoreDeleter) Delete(key []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockKVStoreDeleterMockRecorder) Delete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockKVStoreDeleter)(nil).Delete), key)
}
