// Code generated by MockGen. DO NOT EDIT.
// Source: protocol/config.go

// Package mock is a generated GoMock package.
package mock

import (
	types "github.com/chain5j/chain5j-pkg/types"
	models "github.com/chain5j/chain5j-protocol/models"
	protocol "github.com/chain5j/chain5j-protocol/protocol"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockConfig is a mock of Config interface
type MockConfig struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMockRecorder
}

// MockConfigMockRecorder is the mock recorder for MockConfig
type MockConfigMockRecorder struct {
	mock *MockConfig
}

// NewMockConfig creates a new mock instance
func NewMockConfig(ctrl *gomock.Controller) *MockConfig {
	mock := &MockConfig{ctrl: ctrl}
	mock.recorder = &MockConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfig) EXPECT() *MockConfigMockRecorder {
	return m.recorder
}

// SetDatabase mocks base method
func (m *MockConfig) SetDatabase(db protocol.DatabaseReader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDatabase", db)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDatabase indicates an expected call of SetDatabase
func (mr *MockConfigMockRecorder) SetDatabase(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDatabase", reflect.TypeOf((*MockConfig)(nil).SetDatabase), db)
}

// ChainConfig mocks base method
func (m *MockConfig) ChainConfig() models.ChainConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainConfig")
	ret0, _ := ret[0].(models.ChainConfig)
	return ret0
}

// ChainConfig indicates an expected call of ChainConfig
func (mr *MockConfigMockRecorder) ChainConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainConfig", reflect.TypeOf((*MockConfig)(nil).ChainConfig))
}

// GenesisBlock mocks base method
func (m *MockConfig) GenesisBlock() *models.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenesisBlock")
	ret0, _ := ret[0].(*models.Block)
	return ret0
}

// GenesisBlock indicates an expected call of GenesisBlock
func (mr *MockConfigMockRecorder) GenesisBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenesisBlock", reflect.TypeOf((*MockConfig)(nil).GenesisBlock))
}

// LocalConfig mocks base method
func (m *MockConfig) LocalConfig() *models.LocalConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalConfig")
	ret0, _ := ret[0].(*models.LocalConfig)
	return ret0
}

// LocalConfig indicates an expected call of LocalConfig
func (mr *MockConfigMockRecorder) LocalConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalConfig", reflect.TypeOf((*MockConfig)(nil).LocalConfig))
}

// TxSizeLimit mocks base method
func (m *MockConfig) TxSizeLimit() types.StorageSize {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxSizeLimit")
	ret0, _ := ret[0].(types.StorageSize)
	return ret0
}

// TxSizeLimit indicates an expected call of TxSizeLimit
func (mr *MockConfigMockRecorder) TxSizeLimit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxSizeLimit", reflect.TypeOf((*MockConfig)(nil).TxSizeLimit))
}

// DatabaseConfig mocks base method
func (m *MockConfig) DatabaseConfig() models.DatabaseConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatabaseConfig")
	ret0, _ := ret[0].(models.DatabaseConfig)
	return ret0
}

// DatabaseConfig indicates an expected call of DatabaseConfig
func (mr *MockConfigMockRecorder) DatabaseConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatabaseConfig", reflect.TypeOf((*MockConfig)(nil).DatabaseConfig))
}

// BlockchainConfig mocks base method
func (m *MockConfig) BlockchainConfig() models.BlockchainLocalConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockchainConfig")
	ret0, _ := ret[0].(models.BlockchainLocalConfig)
	return ret0
}

// BlockchainConfig indicates an expected call of BlockchainConfig
func (mr *MockConfigMockRecorder) BlockchainConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockchainConfig", reflect.TypeOf((*MockConfig)(nil).BlockchainConfig))
}

// TxPoolConfig mocks base method
func (m *MockConfig) TxPoolConfig() models.TxPoolLocalConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxPoolConfig")
	ret0, _ := ret[0].(models.TxPoolLocalConfig)
	return ret0
}

// TxPoolConfig indicates an expected call of TxPoolConfig
func (mr *MockConfigMockRecorder) TxPoolConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxPoolConfig", reflect.TypeOf((*MockConfig)(nil).TxPoolConfig))
}

// NodeKeyConfig mocks base method
func (m *MockConfig) NodeKeyConfig() models.NodeKeyLocalConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeKeyConfig")
	ret0, _ := ret[0].(models.NodeKeyLocalConfig)
	return ret0
}

// NodeKeyConfig indicates an expected call of NodeKeyConfig
func (mr *MockConfigMockRecorder) NodeKeyConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeKeyConfig", reflect.TypeOf((*MockConfig)(nil).NodeKeyConfig))
}

// PackerConfig mocks base method
func (m *MockConfig) PackerConfig() models.PackerLocalConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PackerConfig")
	ret0, _ := ret[0].(models.PackerLocalConfig)
	return ret0
}

// PackerConfig indicates an expected call of PackerConfig
func (mr *MockConfigMockRecorder) PackerConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PackerConfig", reflect.TypeOf((*MockConfig)(nil).PackerConfig))
}

// EnablePacker mocks base method
func (m *MockConfig) EnablePacker() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnablePacker")
	ret0, _ := ret[0].(bool)
	return ret0
}

// EnablePacker indicates an expected call of EnablePacker
func (mr *MockConfigMockRecorder) EnablePacker() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnablePacker", reflect.TypeOf((*MockConfig)(nil).EnablePacker))
}

// BroadcasterConfig mocks base method
func (m *MockConfig) BroadcasterConfig() models.BroadcasterLocalConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BroadcasterConfig")
	ret0, _ := ret[0].(models.BroadcasterLocalConfig)
	return ret0
}

// BroadcasterConfig indicates an expected call of BroadcasterConfig
func (mr *MockConfigMockRecorder) BroadcasterConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcasterConfig", reflect.TypeOf((*MockConfig)(nil).BroadcasterConfig))
}

// P2PConfig mocks base method
func (m *MockConfig) P2PConfig() models.P2PConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "P2PConfig")
	ret0, _ := ret[0].(models.P2PConfig)
	return ret0
}

// P2PConfig indicates an expected call of P2PConfig
func (mr *MockConfigMockRecorder) P2PConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "P2PConfig", reflect.TypeOf((*MockConfig)(nil).P2PConfig))
}

// ConsensusConfig mocks base method
func (m *MockConfig) ConsensusConfig() models.ConsensusLocalConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsensusConfig")
	ret0, _ := ret[0].(models.ConsensusLocalConfig)
	return ret0
}

// ConsensusConfig indicates an expected call of ConsensusConfig
func (mr *MockConfigMockRecorder) ConsensusConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsensusConfig", reflect.TypeOf((*MockConfig)(nil).ConsensusConfig))
}
