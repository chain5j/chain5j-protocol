// Code generated by MockGen. DO NOT EDIT.
// Source: protocol/permission.go

// Package mock is a generated GoMock package.
package mock

import (
	event "github.com/chain5j/chain5j-pkg/event"
	models "github.com/chain5j/chain5j-protocol/models"
	permission "github.com/chain5j/chain5j-protocol/models/permission"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockHandshake is a mock of Handshake interface
type MockHandshake struct {
	ctrl     *gomock.Controller
	recorder *MockHandshakeMockRecorder
}

// MockHandshakeMockRecorder is the mock recorder for MockHandshake
type MockHandshakeMockRecorder struct {
	mock *MockHandshake
}

// NewMockHandshake creates a new mock instance
func NewMockHandshake(ctrl *gomock.Controller) *MockHandshake {
	mock := &MockHandshake{ctrl: ctrl}
	mock.recorder = &MockHandshakeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHandshake) EXPECT() *MockHandshakeMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockHandshake) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockHandshakeMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockHandshake)(nil).Start))
}

// Stop mocks base method
func (m *MockHandshake) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockHandshakeMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockHandshake)(nil).Stop))
}

// RequestHandshake mocks base method
func (m *MockHandshake) RequestHandshake(id models.P2PID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestHandshake", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestHandshake indicates an expected call of RequestHandshake
func (mr *MockHandshakeMockRecorder) RequestHandshake(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestHandshake", reflect.TypeOf((*MockHandshake)(nil).RequestHandshake), id)
}

// SubscribeHandshake mocks base method
func (m *MockHandshake) SubscribeHandshake(msg chan *models.HandshakeMsg) event.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeHandshake", msg)
	ret0, _ := ret[0].(event.Subscription)
	return ret0
}

// SubscribeHandshake indicates an expected call of SubscribeHandshake
func (mr *MockHandshakeMockRecorder) SubscribeHandshake(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeHandshake", reflect.TypeOf((*MockHandshake)(nil).SubscribeHandshake), msg)
}

// MockPermission is a mock of Permission interface
type MockPermission struct {
	ctrl     *gomock.Controller
	recorder *MockPermissionMockRecorder
}

// MockPermissionMockRecorder is the mock recorder for MockPermission
type MockPermissionMockRecorder struct {
	mock *MockPermission
}

// NewMockPermission creates a new mock instance
func NewMockPermission(ctrl *gomock.Controller) *MockPermission {
	mock := &MockPermission{ctrl: ctrl}
	mock.recorder = &MockPermissionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPermission) EXPECT() *MockPermissionMockRecorder {
	return m.recorder
}

// IsAdmin mocks base method
func (m *MockPermission) IsAdmin(key string, height uint64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAdmin", key, height)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAdmin indicates an expected call of IsAdmin
func (mr *MockPermissionMockRecorder) IsAdmin(key, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAdmin", reflect.TypeOf((*MockPermission)(nil).IsAdmin), key, height)
}

// IsPeer mocks base method
func (m *MockPermission) IsPeer(peerId models.P2PID, height uint64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPeer", peerId, height)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPeer indicates an expected call of IsPeer
func (mr *MockPermissionMockRecorder) IsPeer(peerId, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPeer", reflect.TypeOf((*MockPermission)(nil).IsPeer), peerId, height)
}

// AddSupervisor mocks base method
func (m *MockPermission) AddSupervisor(key string, info permission.MemberInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSupervisor", key, info)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSupervisor indicates an expected call of AddSupervisor
func (mr *MockPermissionMockRecorder) AddSupervisor(key, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSupervisor", reflect.TypeOf((*MockPermission)(nil).AddSupervisor), key, info)
}

// DelSupervisor mocks base method
func (m *MockPermission) DelSupervisor(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelSupervisor", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelSupervisor indicates an expected call of DelSupervisor
func (mr *MockPermissionMockRecorder) DelSupervisor(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelSupervisor", reflect.TypeOf((*MockPermission)(nil).DelSupervisor), key)
}

// AddPermission mocks base method
func (m *MockPermission) AddPermission(peerId models.P2PID, key string, info permission.MemberInfo, r permission.RoleType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPermission", peerId, key, info, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPermission indicates an expected call of AddPermission
func (mr *MockPermissionMockRecorder) AddPermission(peerId, key, info, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPermission", reflect.TypeOf((*MockPermission)(nil).AddPermission), peerId, key, info, r)
}

// DelPermission mocks base method
func (m *MockPermission) DelPermission(peerId models.P2PID, key string, r permission.RoleType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelPermission", peerId, key, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelPermission indicates an expected call of DelPermission
func (mr *MockPermissionMockRecorder) DelPermission(peerId, key, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelPermission", reflect.TypeOf((*MockPermission)(nil).DelPermission), peerId, key, r)
}
