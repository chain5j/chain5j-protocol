// Code generated by MockGen. DO NOT EDIT.
// Source: protocol/syncer.go

// Package mock is a generated GoMock package.
package mock

import (
	types "github.com/chain5j/chain5j-pkg/types"
	models "github.com/chain5j/chain5j-protocol/models"
	ext "github.com/chain5j/chain5j-protocol/models/ext"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSyncer is a mock of Syncer interface
type MockSyncer struct {
	ctrl     *gomock.Controller
	recorder *MockSyncerMockRecorder
}

// MockSyncerMockRecorder is the mock recorder for MockSyncer
type MockSyncerMockRecorder struct {
	mock *MockSyncer
}

// NewMockSyncer creates a new mock instance
func NewMockSyncer(ctrl *gomock.Controller) *MockSyncer {
	mock := &MockSyncer{ctrl: ctrl}
	mock.recorder = &MockSyncerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSyncer) EXPECT() *MockSyncerMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockSyncer) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockSyncerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockSyncer)(nil).Start))
}

// Stop mocks base method
func (m *MockSyncer) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockSyncerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockSyncer)(nil).Stop))
}

// MockRequestSync is a mock of RequestSync interface
type MockRequestSync struct {
	ctrl     *gomock.Controller
	recorder *MockRequestSyncMockRecorder
}

// MockRequestSyncMockRecorder is the mock recorder for MockRequestSync
type MockRequestSyncMockRecorder struct {
	mock *MockRequestSync
}

// NewMockRequestSync creates a new mock instance
func NewMockRequestSync(ctrl *gomock.Controller) *MockRequestSync {
	mock := &MockRequestSync{ctrl: ctrl}
	mock.recorder = &MockRequestSyncMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRequestSync) EXPECT() *MockRequestSyncMockRecorder {
	return m.recorder
}

// RequestOneHeader mocks base method
func (m *MockRequestSync) RequestOneHeader(peerId models.P2PID, hash types.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestOneHeader", peerId, hash)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestOneHeader indicates an expected call of RequestOneHeader
func (mr *MockRequestSyncMockRecorder) RequestOneHeader(peerId, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestOneHeader", reflect.TypeOf((*MockRequestSync)(nil).RequestOneHeader), peerId, hash)
}

// RequestHeadersByHash mocks base method
func (m *MockRequestSync) RequestHeadersByHash(peerId models.P2PID, origin types.Hash, amount, skip int, reverse bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestHeadersByHash", peerId, origin, amount, skip, reverse)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestHeadersByHash indicates an expected call of RequestHeadersByHash
func (mr *MockRequestSyncMockRecorder) RequestHeadersByHash(peerId, origin, amount, skip, reverse interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestHeadersByHash", reflect.TypeOf((*MockRequestSync)(nil).RequestHeadersByHash), peerId, origin, amount, skip, reverse)
}

// RequestHeadersByNumber mocks base method
func (m *MockRequestSync) RequestHeadersByNumber(peerId models.P2PID, origin uint64, amount, skip int, reverse bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestHeadersByNumber", peerId, origin, amount, skip, reverse)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestHeadersByNumber indicates an expected call of RequestHeadersByNumber
func (mr *MockRequestSyncMockRecorder) RequestHeadersByNumber(peerId, origin, amount, skip, reverse interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestHeadersByNumber", reflect.TypeOf((*MockRequestSync)(nil).RequestHeadersByNumber), peerId, origin, amount, skip, reverse)
}

// HandleBlockHeadersMsg mocks base method
func (m *MockRequestSync) HandleBlockHeadersMsg(peerId models.P2PID, headers []*models.Header) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleBlockHeadersMsg", peerId, headers)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleBlockHeadersMsg indicates an expected call of HandleBlockHeadersMsg
func (mr *MockRequestSyncMockRecorder) HandleBlockHeadersMsg(peerId, headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleBlockHeadersMsg", reflect.TypeOf((*MockRequestSync)(nil).HandleBlockHeadersMsg), peerId, headers)
}

// HandleBlockBodiesMsg mocks base method
func (m *MockRequestSync) HandleBlockBodiesMsg(peerId models.P2PID, request []*models.Body) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleBlockBodiesMsg", peerId, request)
}

// HandleBlockBodiesMsg indicates an expected call of HandleBlockBodiesMsg
func (mr *MockRequestSyncMockRecorder) HandleBlockBodiesMsg(peerId, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleBlockBodiesMsg", reflect.TypeOf((*MockRequestSync)(nil).HandleBlockBodiesMsg), peerId, request)
}

// MockResponseSync is a mock of ResponseSync interface
type MockResponseSync struct {
	ctrl     *gomock.Controller
	recorder *MockResponseSyncMockRecorder
}

// MockResponseSyncMockRecorder is the mock recorder for MockResponseSync
type MockResponseSyncMockRecorder struct {
	mock *MockResponseSync
}

// NewMockResponseSync creates a new mock instance
func NewMockResponseSync(ctrl *gomock.Controller) *MockResponseSync {
	mock := &MockResponseSync{ctrl: ctrl}
	mock.recorder = &MockResponseSyncMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResponseSync) EXPECT() *MockResponseSyncMockRecorder {
	return m.recorder
}

// SendBlockHeaders mocks base method
func (m *MockResponseSync) SendBlockHeaders(peerId models.P2PID, query ext.GetBlockHeadersData) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendBlockHeaders", peerId, query)
}

// SendBlockHeaders indicates an expected call of SendBlockHeaders
func (mr *MockResponseSyncMockRecorder) SendBlockHeaders(peerId, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendBlockHeaders", reflect.TypeOf((*MockResponseSync)(nil).SendBlockHeaders), peerId, query)
}

// SendBlockBodies mocks base method
func (m *MockResponseSync) SendBlockBodies(peerId models.P2PID, hashes []types.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendBlockBodies", peerId, hashes)
}

// SendBlockBodies indicates an expected call of SendBlockBodies
func (mr *MockResponseSyncMockRecorder) SendBlockBodies(peerId, hashes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendBlockBodies", reflect.TypeOf((*MockResponseSync)(nil).SendBlockBodies), peerId, hashes)
}
